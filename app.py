{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2084068c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading Logic A from logic a.csv\n",
      "Logic A loaded successfully with 11391 rows and 24 columns\n",
      "Reading Logic B from logic b.csv\n",
      "Logic B loaded successfully with 11391 rows and 24 columns\n",
      "Reading Logic C from logic c.csv\n",
      "Logic C loaded successfully with 11391 rows and 24 columns\n",
      "Reading Logic D from logic d.csv\n",
      "Logic D loaded successfully with 11391 rows and 24 columns\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>product_name</th>\n",
       "      <th>location_id</th>\n",
       "      <th>business_tagging</th>\n",
       "      <th>product_type_name</th>\n",
       "      <th>vendor_id</th>\n",
       "      <th>primary_vendor_name</th>\n",
       "      <th>max_doi_final</th>\n",
       "      <th>Ship Date</th>\n",
       "      <th>INBOUND TO OOS PROJECTION</th>\n",
       "      <th>Pareto</th>\n",
       "      <th>active_hub</th>\n",
       "      <th>coverage</th>\n",
       "      <th>New DOI Policy WH</th>\n",
       "      <th>New RL Qty</th>\n",
       "      <th>New RL Value</th>\n",
       "      <th>Order Date</th>\n",
       "      <th>Landed DOI</th>\n",
       "      <th>Logic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>100</td>\n",
       "      <td>Cimory Squeeze Original Yogurt 120ml 120 ml</td>\n",
       "      <td>160</td>\n",
       "      <td>QUICK_COMMERCE</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>766</td>\n",
       "      <td>PT MACROSENTRA NIAGABOGA</td>\n",
       "      <td>3.0</td>\n",
       "      <td>19 Feb 2025</td>\n",
       "      <td>POTENTIAL OOS</td>\n",
       "      <td>B</td>\n",
       "      <td>30</td>\n",
       "      <td>24 Feb 2025</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1176</td>\n",
       "      <td>10,691,016</td>\n",
       "      <td>10/02/2025</td>\n",
       "      <td>17</td>\n",
       "      <td>Logic A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11411</th>\n",
       "      <td>100</td>\n",
       "      <td>Cimory Squeeze Original Yogurt 120ml 120 ml</td>\n",
       "      <td>160</td>\n",
       "      <td>QUICK_COMMERCE</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>766</td>\n",
       "      <td>PT MACROSENTRA NIAGABOGA</td>\n",
       "      <td>7.0</td>\n",
       "      <td>19 Feb 2025</td>\n",
       "      <td>POTENTIAL OOS</td>\n",
       "      <td>B</td>\n",
       "      <td>30</td>\n",
       "      <td>24 Feb 2025</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1560</td>\n",
       "      <td>14,181,960</td>\n",
       "      <td>10/02/2025</td>\n",
       "      <td>21</td>\n",
       "      <td>Logic B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22802</th>\n",
       "      <td>100</td>\n",
       "      <td>Cimory Squeeze Original Yogurt 120ml 120 ml</td>\n",
       "      <td>160</td>\n",
       "      <td>QUICK_COMMERCE</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>766</td>\n",
       "      <td>PT MACROSENTRA NIAGABOGA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19 Feb 2025</td>\n",
       "      <td>POTENTIAL OOS</td>\n",
       "      <td>B</td>\n",
       "      <td>30</td>\n",
       "      <td>24 Feb 2025</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1368</td>\n",
       "      <td>12,436,488</td>\n",
       "      <td>10/02/2025</td>\n",
       "      <td>18</td>\n",
       "      <td>Logic C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34193</th>\n",
       "      <td>100</td>\n",
       "      <td>Cimory Squeeze Original Yogurt 120ml 120 ml</td>\n",
       "      <td>160</td>\n",
       "      <td>QUICK_COMMERCE</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>766</td>\n",
       "      <td>PT MACROSENTRA NIAGABOGA</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19 Feb 2025</td>\n",
       "      <td>POTENTIAL OOS</td>\n",
       "      <td>B</td>\n",
       "      <td>30</td>\n",
       "      <td>24 Feb 2025</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1368</td>\n",
       "      <td>12,436,488</td>\n",
       "      <td>10/02/2025</td>\n",
       "      <td>16</td>\n",
       "      <td>Logic D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2442</th>\n",
       "      <td>10034</td>\n",
       "      <td>Tasty Fries Shoestring Plain French Fries 900 ...</td>\n",
       "      <td>160</td>\n",
       "      <td>QUICK_COMMERCE</td>\n",
       "      <td>Fresh</td>\n",
       "      <td>525</td>\n",
       "      <td>PT Indoguna Utama</td>\n",
       "      <td>3.5</td>\n",
       "      <td>19 Feb 2025</td>\n",
       "      <td>POTENTIAL OOS</td>\n",
       "      <td>A</td>\n",
       "      <td>30</td>\n",
       "      <td>24 Feb 2025</td>\n",
       "      <td>3.5</td>\n",
       "      <td>228</td>\n",
       "      <td>5,928,000</td>\n",
       "      <td>13/02/2025</td>\n",
       "      <td>11</td>\n",
       "      <td>Logic A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      product_id                                       product_name  \\\n",
       "20           100        Cimory Squeeze Original Yogurt 120ml 120 ml   \n",
       "11411        100        Cimory Squeeze Original Yogurt 120ml 120 ml   \n",
       "22802        100        Cimory Squeeze Original Yogurt 120ml 120 ml   \n",
       "34193        100        Cimory Squeeze Original Yogurt 120ml 120 ml   \n",
       "2442       10034  Tasty Fries Shoestring Plain French Fries 900 ...   \n",
       "\n",
       "      location_id business_tagging product_type_name vendor_id  \\\n",
       "20            160   QUICK_COMMERCE             Fresh       766   \n",
       "11411         160   QUICK_COMMERCE             Fresh       766   \n",
       "22802         160   QUICK_COMMERCE             Fresh       766   \n",
       "34193         160   QUICK_COMMERCE             Fresh       766   \n",
       "2442          160   QUICK_COMMERCE             Fresh       525   \n",
       "\n",
       "            primary_vendor_name  max_doi_final    Ship Date  \\\n",
       "20     PT MACROSENTRA NIAGABOGA            3.0  19 Feb 2025   \n",
       "11411  PT MACROSENTRA NIAGABOGA            7.0  19 Feb 2025   \n",
       "22802  PT MACROSENTRA NIAGABOGA            5.0  19 Feb 2025   \n",
       "34193  PT MACROSENTRA NIAGABOGA            5.0  19 Feb 2025   \n",
       "2442          PT Indoguna Utama            3.5  19 Feb 2025   \n",
       "\n",
       "      INBOUND TO OOS PROJECTION Pareto  active_hub     coverage  \\\n",
       "20                POTENTIAL OOS      B          30  24 Feb 2025   \n",
       "11411             POTENTIAL OOS      B          30  24 Feb 2025   \n",
       "22802             POTENTIAL OOS      B          30  24 Feb 2025   \n",
       "34193             POTENTIAL OOS      B          30  24 Feb 2025   \n",
       "2442              POTENTIAL OOS      A          30  24 Feb 2025   \n",
       "\n",
       "       New DOI Policy WH  New RL Qty New RL Value  Order Date Landed DOI  \\\n",
       "20                   3.0        1176   10,691,016  10/02/2025         17   \n",
       "11411                7.0        1560   14,181,960  10/02/2025         21   \n",
       "22802                5.0        1368   12,436,488  10/02/2025         18   \n",
       "34193                5.0        1368   12,436,488  10/02/2025         16   \n",
       "2442                 3.5         228    5,928,000  13/02/2025         11   \n",
       "\n",
       "         Logic  \n",
       "20     Logic A  \n",
       "11411  Logic B  \n",
       "22802  Logic C  \n",
       "34193  Logic D  \n",
       "2442   Logic A  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-02-11 16:54:10.938 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.201 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Kartika Puspasari\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-02-11 16:54:11.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.216 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.217 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.218 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.219 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.221 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.222 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.223 Session state does not function when running a script without `streamlit run`\n",
      "2025-02-11 16:54:11.224 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.237 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.238 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.242 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.243 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.244 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.254 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.255 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.256 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-02-11 16:54:11.257 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Plotly Express cannot process wide-form data with columns of different type.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[14], line 103\u001b[0m\n\u001b[0;32m    100\u001b[0m     x_axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mproduct_id\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    102\u001b[0m \u001b[38;5;66;03m# Line chart for comparison\u001b[39;00m\n\u001b[1;32m--> 103\u001b[0m fig \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mline(grouped_df, x\u001b[38;5;241m=\u001b[39mx_axis, y\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNew RL Qty\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcoverage\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLanded DOI\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNew RL Value\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNew DOI Policy WH\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmax_doi_final\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m    104\u001b[0m               title\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mComparison of Metrics by \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mview_by\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, markers\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLogic\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    105\u001b[0m st\u001b[38;5;241m.\u001b[39mplotly_chart(fig)\n\u001b[0;32m    107\u001b[0m \u001b[38;5;66;03m# Display merged data\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\plotly\\express\\_chart_types.py:264\u001b[0m, in \u001b[0;36mline\u001b[1;34m(data_frame, x, y, line_group, color, line_dash, symbol, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, line_dash_sequence, line_dash_map, symbol_sequence, symbol_map, markers, log_x, log_y, range_x, range_y, line_shape, render_mode, title, template, width, height)\u001b[0m\n\u001b[0;32m    216\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mline\u001b[39m(\n\u001b[0;32m    217\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    218\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    258\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    259\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m go\u001b[38;5;241m.\u001b[39mFigure:\n\u001b[0;32m    260\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    261\u001b[0m \u001b[38;5;124;03m    In a 2D line plot, each row of `data_frame` is represented as vertex of\u001b[39;00m\n\u001b[0;32m    262\u001b[0m \u001b[38;5;124;03m    a polyline mark in 2D space.\u001b[39;00m\n\u001b[0;32m    263\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 264\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m make_figure(args\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mlocals\u001b[39m(), constructor\u001b[38;5;241m=\u001b[39mgo\u001b[38;5;241m.\u001b[39mScatter)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\plotly\\express\\_core.py:2090\u001b[0m, in \u001b[0;36mmake_figure\u001b[1;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[0;32m   2087\u001b[0m layout_patch \u001b[38;5;241m=\u001b[39m layout_patch \u001b[38;5;129;01mor\u001b[39;00m {}\n\u001b[0;32m   2088\u001b[0m apply_default_cascade(args)\n\u001b[1;32m-> 2090\u001b[0m args \u001b[38;5;241m=\u001b[39m build_dataframe(args, constructor)\n\u001b[0;32m   2091\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m constructor \u001b[38;5;129;01min\u001b[39;00m [go\u001b[38;5;241m.\u001b[39mTreemap, go\u001b[38;5;241m.\u001b[39mSunburst, go\u001b[38;5;241m.\u001b[39mIcicle] \u001b[38;5;129;01mand\u001b[39;00m args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpath\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   2092\u001b[0m     args \u001b[38;5;241m=\u001b[39m process_dataframe_hierarchy(args)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\plotly\\express\\_core.py:1539\u001b[0m, in \u001b[0;36mbuild_dataframe\u001b[1;34m(args, constructor)\u001b[0m\n\u001b[0;32m   1537\u001b[0m         dtype \u001b[38;5;241m=\u001b[39m v_dtype\n\u001b[0;32m   1538\u001b[0m     \u001b[38;5;28;01melif\u001b[39;00m dtype \u001b[38;5;241m!=\u001b[39m v_dtype:\n\u001b[1;32m-> 1539\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1540\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPlotly Express cannot process wide-form data with columns of different type.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1541\u001b[0m         )\n\u001b[0;32m   1542\u001b[0m df_output \u001b[38;5;241m=\u001b[39m df_output\u001b[38;5;241m.\u001b[39mmelt(\n\u001b[0;32m   1543\u001b[0m     id_vars\u001b[38;5;241m=\u001b[39mwide_id_vars,\n\u001b[0;32m   1544\u001b[0m     value_vars\u001b[38;5;241m=\u001b[39mwide_value_vars,\n\u001b[0;32m   1545\u001b[0m     var_name\u001b[38;5;241m=\u001b[39mvar_name,\n\u001b[0;32m   1546\u001b[0m     value_name\u001b[38;5;241m=\u001b[39mvalue_name,\n\u001b[0;32m   1547\u001b[0m )\n\u001b[0;32m   1548\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df_output\u001b[38;5;241m.\u001b[39mcolumns) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mset\u001b[39m(df_output\u001b[38;5;241m.\u001b[39mcolumns)), (\n\u001b[0;32m   1549\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWide-mode name-inference failure, likely due to a internal bug. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1550\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPlease report this to \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1551\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttps://github.com/plotly/plotly.py/issues/new and we will try to \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1552\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mreplicate and fix it.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1553\u001b[0m )\n",
      "\u001b[1;31mValueError\u001b[0m: Plotly Express cannot process wide-form data with columns of different type."
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "import plotly.express as px\n",
    "#data1 = pd.read_csv('logic a.csv')\n",
    "#data2 = pd.read_csv('logic b.csv')\n",
    "#data3 = pd.read_csv('logic c.csv')\n",
    "#data4 = pd.read_csv('logic d.csv')\n",
    "\n",
    "\n",
    "#data1 = data1[['product_id','product_name','location_id','business_tagging','product_type_name','vendor_id','primary_vendor_name','Logic A) coverage','Logic A) New DOI Policy WH','max_doi_final','Logic A) New RL Qty','Logic A) New RL Value','Logic A) Order Date','Ship Date','INBOUND TO OOS PROJECTION','Pareto','active_hub','Logic A) Landed DOI']]\n",
    "#data2 = data2[['product_id','product_name','location_id','business_tagging','product_type_name','vendor_id','primary_vendor_name','Logic B) coverage','Logic B) New DOI Policy WH','max_doi_final','Logic B) New RL Qty','Logic B) New RL Value','Logic B) Order Date','Ship Date','INBOUND TO OOS PROJECTION','Pareto','active_hub','Logic B) Landed DOI']]\n",
    "#data3 = data3[['product_id','product_name','location_id','business_tagging','product_type_name','vendor_id','primary_vendor_name','Logic C) coverage','Logic C) New DOI Policy WH','max_doi_final','Logic C) New RL Qty','Logic C) New RL Value','Logic C) Order Date','Ship Date','INBOUND TO OOS PROJECTION','Pareto','active_hub','Logic C) Landed DOI']]\n",
    "#data4 = data4[['product_id','product_name','location_id','business_tagging','product_type_name','vendor_id','primary_vendor_name','Logic D) coverage','Logic D) New DOI Policy WH','max_doi_final','Logic D) New RL Qty','Logic D) New RL Value','Logic D) Order Date','Ship Date','INBOUND TO OOS PROJECTION','Pareto','active_hub','Logic D) Landed DOI']]\n",
    "\n",
    "# Define file paths\n",
    "file_paths = {\n",
    "    \"Logic A\": \"logic a.csv\",\n",
    "    \"Logic B\": \"logic b.csv\",\n",
    "    \"Logic C\": \"logic c.csv\",\n",
    "    \"Logic D\": \"logic d.csv\",\n",
    "}\n",
    "\n",
    "# Load data one by one and inspect\n",
    "dfs = []\n",
    "for key, path in file_paths.items():\n",
    "    print(f\"Reading {key} from {path}\")\n",
    "    try:\n",
    "        df = pd.read_csv(path, dtype={\"product_id\": str, \"location_id\": str, \"vendor_id\": str})\n",
    "        df[\"Logic\"] = key  # Add a marker column to indicate logic type\n",
    "        print(f\"{key} loaded successfully with {df.shape[0]} rows and {df.shape[1]} columns\")\n",
    "        dfs.append(df)\n",
    "    except Exception as e:\n",
    "        print(f\"Error reading {key}: {e}\")\n",
    "\n",
    "# Define common columns and logic-specific columns\n",
    "common_columns = [\n",
    "    'product_id', 'product_name', 'location_id', 'business_tagging', 'product_type_name',\n",
    "    'vendor_id', 'primary_vendor_name', 'max_doi_final', 'Ship Date', 'INBOUND TO OOS PROJECTION',\n",
    "    'Pareto', 'active_hub'\n",
    "]\n",
    "\n",
    "# Standardized logic-specific column names\n",
    "logic_column_mapping = {\n",
    "    'coverage': 'coverage',\n",
    "    'New DOI Policy WH': 'New DOI Policy WH',\n",
    "    'New RL Qty': 'New RL Qty',\n",
    "    'New RL Value': 'New RL Value',\n",
    "    'Order Date': 'Order Date',\n",
    "    'Landed DOI': 'Landed DOI'\n",
    "}\n",
    "\n",
    "# Process each dataframe and normalize column names\n",
    "normalized_dfs = []\n",
    "for df in dfs:\n",
    "    logic = df[\"Logic\"].iloc[0]  # Get logic name\n",
    "    rename_mapping = {col: logic_column_mapping[col.replace(f\"{logic}) \", \"\")] for col in df.columns if any(col.endswith(suffix) for suffix in logic_column_mapping.keys())}\n",
    "    df = df.rename(columns=rename_mapping)\n",
    "    df = df[common_columns + list(logic_column_mapping.values()) + [\"Logic\"]]\n",
    "    normalized_dfs.append(df)\n",
    "\n",
    "# Concatenate all logic data into a single dataframe\n",
    "merged_df = pd.concat(normalized_dfs, ignore_index=True)\n",
    "\n",
    "merged_df = merged_df.sort_values(by=['location_id','product_id'])\n",
    "\n",
    "display(merged_df.head())\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"Comparison of RL Quantity Logics\")\n",
    "\n",
    "# Sidebar filters\n",
    "st.sidebar.header(\"Filters\")\n",
    "view_by = st.sidebar.radio(\"View By\", [\"Product ID\", \"Vendor\"])\n",
    "selected_pareto = st.sidebar.multiselect(\"Filter by Pareto\", merged_df[\"Pareto\"].unique())\n",
    "selected_location = st.sidebar.multiselect(\"Filter by Location ID\", merged_df[\"location_id\"].unique())\n",
    "selected_business_tag = st.sidebar.multiselect(\"Filter by Business Tag\", merged_df[\"business_tagging\"].unique())\n",
    "\n",
    "# Apply filters\n",
    "filtered_df = merged_df.copy()\n",
    "if selected_pareto:\n",
    "    filtered_df = filtered_df[filtered_df[\"Pareto\"].isin(selected_pareto)]\n",
    "if selected_location:\n",
    "    filtered_df = filtered_df[filtered_df[\"location_id\"].isin(selected_location)]\n",
    "if selected_business_tag:\n",
    "    filtered_df = filtered_df[filtered_df[\"business_tagging\"].isin(selected_business_tag)]\n",
    "\n",
    "# Aggregation logic\n",
    "if view_by == \"Vendor\":\n",
    "    grouped_df = filtered_df.groupby([\"vendor_id\", \"primary_vendor_name\", \"Logic\"]).agg({\n",
    "        \"New RL Qty\": \"sum\",\n",
    "        \"New RL Value\": \"sum\",\n",
    "        \"New DOI Policy WH\": \"mean\",\n",
    "        \"max_doi_final\": \"mean\",\n",
    "        \"Landed DOI\": \"mean\"\n",
    "    }).reset_index()\n",
    "    x_axis = \"primary_vendor_name\"\n",
    "else:\n",
    "    grouped_df = filtered_df\n",
    "    x_axis = \"product_id\"\n",
    "\n",
    "# Line chart for comparison\n",
    "fig = px.line(grouped_df, x=x_axis, y=[\"New RL Qty\", \"coverage\", \"Landed DOI\", \"New RL Value\", \"New DOI Policy WH\", \"max_doi_final\"],\n",
    "              title=f\"Comparison of Metrics by {view_by}\", markers=True, color=\"Logic\")\n",
    "st.plotly_chart(fig)\n",
    "\n",
    "# Display merged data\n",
    "st.write(\"### Merged Data Preview\")\n",
    "st.dataframe(filtered_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "117d3024",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
